<?php

namespace Proxies\__CG__\Entities;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class User extends \Entities\User implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getUserId()
    {
        $this->__load();
        return parent::getUserId();
    }

    public function getUserDate()
    {
        $this->__load();
        return parent::getUserDate();
    }

    public function getUserName()
    {
        $this->__load();
        return parent::getUserName();
    }

    public function setUserName($name)
    {
        $this->__load();
        return parent::setUserName($name);
    }

    public function getUserEmail()
    {
        $this->__load();
        return parent::getUserEmail();
    }

    public function setUserEmail($email)
    {
        $this->__load();
        return parent::setUserEmail($email);
    }

    public function getUserPass()
    {
        $this->__load();
        return parent::getUserPass();
    }

    public function setUserPass($pass)
    {
        $this->__load();
        return parent::setUserPass($pass);
    }

    public function getUserCompany()
    {
        $this->__load();
        return parent::getUserCompany();
    }

    public function setUserCompany($company)
    {
        $this->__load();
        return parent::setUserCompany($company);
    }

    public function getUserStatus()
    {
        $this->__load();
        return parent::getUserStatus();
    }

    public function setUserStatus($status)
    {
        $this->__load();
        return parent::setUserStatus($status);
    }

    public function getUserAccess()
    {
        $this->__load();
        return parent::getUserAccess();
    }

    public function setUserAccess($access)
    {
        $this->__load();
        return parent::setUserAccess($access);
    }

    public function getUserOrders()
    {
        $this->__load();
        return parent::getUserOrders();
    }

    public function getUserProducts()
    {
        $this->__load();
        return parent::getUserProducts();
    }

    public function addUserOrder(\Entities\Order $order)
    {
        $this->__load();
        return parent::addUserOrder($order);
    }

    public function getUserAccessRole()
    {
        $this->__load();
        return parent::getUserAccessRole();
    }

    public function getUserConvertedDate($format = 'd/m/Y H:i:s')
    {
        $this->__load();
        return parent::getUserConvertedDate($format);
    }

    public function getUserStatusRole()
    {
        $this->__load();
        return parent::getUserStatusRole();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'user_date', 'user_name', 'user_email', 'user_pass', 'user_company', 'user_access', 'user_status', 'user_orders', 'user_products');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}